


///تفاوت constووfinal
/// const:
/// مقداردهی اولیه میشود فقط یکبار زمانی که اول متغیر مقدارمیگیرد و دیگر هیچگاه در برنامه قابل تغییردادن نیست متغیری که در کانست قرار دارد
/// final:
/// یک بار میتوانیم تعریفش کنیم یک بار درحالت اجرا مقدار بگیرد و از اون به بعد دیگ نمیتونه مقدار بگیره
void main(){
  //اینجا فاینال تعریف میکنیم به علت پرفورمنس بهتره اپلیکیشنمون 
  //چه ربطی به پرفورمنس دارد چون میفهمه یک بار فقط مقداردهی کرده و تو اولویت قرارش نمیده که مثل متغیرهای دیگ همش بخواد تغییر بکنه
  //میدونیم که فقط یک بار میخواهیم استریم را مقداردهی کنیم اونم در زمان اجرا
  //چون مقدار داده ایی که تعریف کردیم intهست
  //پس اینجا هم باید intباشد
  final Stream<int> stream = printNumber();
  //برای گوش دادن به این استریم باید این لیستن را بنویسیم
  stream.listen((event) { 
    print(event);
  });
}

//نوع داده ایی این استریم از نو int
//زمانی که بخواهیم از استریم استفاده کنیم حتما باید 
//*asyncبزاریم 
//و این با asyncخالی متفاوت هست چون این مخصوص استریم هست
Stream<int> printNumber()async*{
  int value = 1;
  //این حلقه تا ابد برقرار هست 
  //حلقه بینهایت
  while(true){
    //این فقط داخل استریم کار میکند و دیتارا برای ما ارسال میکند به اون جایی که دارن بهش گوش میدهند
    //این valueکه بالا تعریف کردیم را میخواهیم هی مدام بفرستیم
    //دیتارا ارسال میکند به جایی که بهش گوش میدهند
     yield value++;
     //حالا اینجا نمیخواییم برنامه دچار کرش شود پس یک وقفه ایجاد میکنیم که هر یک ثانیه ارسال کند
     await Future.delayed(Duration(seconds: 1));
  }
}
//میتونیم stringهم انجام بدیم 
Stream<String> printNumberrString()async*{
  int value = 1;
  //این حلقه تا ابد برقرار هست 
  //حلقه بینهایت
  while(true){
    //این فقط داخل استریم کار میکند و دیتارا برای ما ارسال میکند به اون جایی که دارن بهش گوش میدهند
    //این valueکه بالا تعریف کردیم را میخواهیم هی مدام بفرستیم
    //دیتارا ارسال میکند به جایی که بهش گوش میدهند
     yield "hana:" + (value++).toString();
     //حالا اینجا نمیخواییم برنامه دچار کرش شود پس یک وقفه ایجاد میکنیم که هر یک ثانیه ارسال کند
     await Future.delayed(Duration(seconds: 1));
  }
}